"""
Script to display the results of a correctly run simulation.
This script loads and displays the visualization assets generated by visualize_simulation_run.py.
"""

import os
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
from IPython.display import display, HTML

def display_simulation_results():
    """Display the simulation results in a notebook-friendly format."""
    
    # Check if results exist
    if not os.path.exists("v250529/results"):
        print("Error: Results directory not found. Please run visualize_simulation_run.py first.")
        return
    
    # Display simulation output
    print("Simulation Output:")
    print("=================")
    with open("v250529/simulation_output.txt", "r") as f:
        # Display first 10 lines and last 10 lines
        lines = f.readlines()
        for line in lines[:10]:
            print(line.strip())
        print("...")
        for line in lines[-10:]:
            print(line.strip())
    print("\n")
    
    # Display 3D trajectories
    plt.figure(figsize=(12, 10))
    img = mpimg.imread("v250529/results/3d_trajectories.png")
    plt.imshow(img)
    plt.axis('off')
    plt.title("3D Trajectories of Agents and Target")
    plt.show()
    
    # Display rewards over time
    plt.figure(figsize=(12, 8))
    img = mpimg.imread("v250529/results/agent_rewards.png")
    plt.imshow(img)
    plt.axis('off')
    plt.title("Agent Rewards Over Time")
    plt.show()
    
    # Display distances to target
    plt.figure(figsize=(12, 8))
    img = mpimg.imread("v250529/results/distances_to_target.png")
    plt.imshow(img)
    plt.axis('off')
    plt.title("Agent Distances to Target Over Time")
    plt.show()
    
    # Display a few key frames
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    axes = axes.flatten()
    
    # Select key frames to display
    key_frames = [0, 3, 6, 9, 11, 12]
    
    for i, frame_idx in enumerate(key_frames):
        img = mpimg.imread(f"v250529/results/frame_{frame_idx:02d}.png")
        axes[i].imshow(img)
        axes[i].axis('off')
        axes[i].set_title(f"Iteration {frame_idx}")
    
    plt.tight_layout()
    plt.suptitle("Key Frames from Simulation", fontsize=16, y=1.02)
    plt.show()
    
    # Display simulation summary
    print("Simulation Summary:")
    print("==================")
    with open("v250529/results/simulation_summary.txt", "r") as f:
        print(f.read())

if __name__ == "__main__":
    display_simulation_results()